{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cottle",
	"scopeName": "source.cottle",
	"patterns": [
		{
			"include": "#template-block"
		},
		{
			"include": "#literal-content"
		}
	],
	"repository": {
		"template-block": {
			"name": "meta.template-block.cottle",
			"begin": "\\{\\{",
			"end": "\\}\\}",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.template.begin.cottle" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.definition.template.end.cottle" }
			},
			"patterns": [
				{
					"include": "#template-content"
				}
			]
		},
		"template-content": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#conditional-statements"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#built-in-functions"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#arrays"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"conditional-statements": {
			"patterns": [
				{
					"name": "meta.conditional.cottle",
					"begin": "\\b(if|elif|else)\\b",
					"end": "\\^|(?=\\}\\})",
					"beginCaptures": {
						"1": { "name": "keyword.control.conditional.cottle" }
					},
					"patterns": [
						{
							"name": "meta.conditional.condition.cottle",
							"begin": "\\G",
							"end": ":",
							"endCaptures": {
								"0": { "name": "punctuation.separator.conditional.cottle" }
							},
							"patterns": [
								{
									"include": "#built-in-functions"
								},
								{
									"include": "#operators"
								},
								{
									"include": "#variables"
								},
								{
									"include": "#strings"
								},
								{
									"include": "#numbers"
								},
								{
									"include": "#arrays"
								}
							]
						},
						{
							"name": "text.literal.cottle",
							"begin": "(?<=:)",
							"end": "(?=\\^|\\}\\})",
							"patterns": [
								{
									"include": "#template-block"
								}
							]
						}
					]
				}
			]
		},
		"comments": {
			"name": "comment.block.cottle",
			"begin": "_",
			"end": "(?=\\}\\})|\\^",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.comment.begin.cottle" }
			},
			"endCaptures": {
				"0": { "name": "punctuation.definition.comment.end.cottle" }
			}
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.cottle",
					"match": "\\b(echo|wrap|unwrap|if|elif|else|for|empty|set|while|dump|declare|return|to|in|as|when)\\b"
				},
				{
					"name": "keyword.operator.logical.cottle",
					"match": "\\b(and|or|not)\\b"
				}
			]
		},
		"built-in-functions": {
			"name": "support.function.builtin.cottle",
			"match": "\\b(cmp|default|defined|eq|ge|gt|has|le|lt|ne|xor|abs|add|ceil|cos|div|floor|max|min|mod|mul|pow|rand|round|sin|sub|cat|cross|except|find|filter|flip|join|len|map|range|slice|sort|union|zip|char|format|lcase|match|ord|split|token|ucase|cast|type|call|VARIABLES|ARGS|InsertTemplate|replace)\\b"
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.comparison.cottle",
					"match": "(>=|<=|>|<|==|!=|=)"
				},
				{
					"name": "keyword.operator.logical.cottle",
					"match": "(&&|\\|\\||!)"
				},
				{
					"name": "keyword.operator.arithmetic.cottle",
					"match": "(\\+|\\-|\\*|\\/|%)"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.global.cottle",
					"match": "\\b[A-Z_][A-Z0-9_]*\\b"
				},
				{
					"name": "variable.other.cottle",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.cottle",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.cottle",
							"match": "@."
						}
					]
				},
				{
					"name": "string.quoted.single.cottle",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.cottle",
							"match": "@."
						}
					]
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.cottle",
			"match": "\\b\\d+(\\.\\d+)?\\b"
		},
		"arrays": {
			"patterns": [
				{
					"name": "punctuation.definition.array.begin.cottle",
					"match": "\\["
				},
				{
					"name": "punctuation.definition.array.end.cottle",
					"match": "\\]"
				}
			]
		},
		"line-continuation": {
			"name": "punctuation.separator.continuation.cottle",
			"match": "\\^"
		},
		"literal-content": {
			"name": "text.literal.cottle",
			"match": "[^{]+"
		}
	}
}